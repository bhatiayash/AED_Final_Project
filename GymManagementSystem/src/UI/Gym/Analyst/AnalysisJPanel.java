/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.Gym.Analyst;

import Business.Program.Program;
import Business.Enterprise.GymEnterprise;
import Business.Enterprise.SalesEnterprise;
import Business.Organization.Organization;
import Business.Sales.Sales;
import Business.Accounts.UserAccount;
import Business.WorkQueue.BookingRequest;
import Business.WorkQueue.ProgramRequest;
import Business.WorkQueue.SalesQueue;
import Business.WorkQueue.SalesRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Window;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.StandardBarPainter;
import org.jfree.data.category.DefaultCategoryDataset;






/**
 *
 * @author akash
 */
public class AnalysisJPanel extends javax.swing.JPanel {
    
    //private GymEnterprise fitenterprise;
    private GymEnterprise gymEnterprise;
    private JPanel container;
    private SalesEnterprise salesenterprise;
    
   

    /**
     * Creates new form AnalysisJPanel
     */
    public AnalysisJPanel(JPanel container, GymEnterprise gymEnterprise, SalesEnterprise salesenterprise) {
        initComponents();
         this.container = container;
        this.gymEnterprise = gymEnterprise;
        this.salesenterprise = salesenterprise;
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnMostEnrolledPrograms = new javax.swing.JButton();
        btnMostActiveCustomers = new javax.swing.JButton();
        btnMostSoldProducts = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 102, 102));

        btnMostEnrolledPrograms.setFont(new java.awt.Font("Bell MT", 1, 21)); // NOI18N
        btnMostEnrolledPrograms.setForeground(new java.awt.Color(0, 102, 102));
        btnMostEnrolledPrograms.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Business/to-do-list.png"))); // NOI18N
        btnMostEnrolledPrograms.setText("Highest Enrolled Programs");
        btnMostEnrolledPrograms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostEnrolledProgramsActionPerformed(evt);
            }
        });

        btnMostActiveCustomers.setFont(new java.awt.Font("Bell MT", 1, 21)); // NOI18N
        btnMostActiveCustomers.setForeground(new java.awt.Color(0, 102, 102));
        btnMostActiveCustomers.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Business/user.png"))); // NOI18N
        btnMostActiveCustomers.setText("View active customers ");
        btnMostActiveCustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostActiveCustomersActionPerformed(evt);
            }
        });

        btnMostSoldProducts.setFont(new java.awt.Font("Bell MT", 1, 21)); // NOI18N
        btnMostSoldProducts.setForeground(new java.awt.Color(0, 102, 102));
        btnMostSoldProducts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Business/protein-powder.png"))); // NOI18N
        btnMostSoldProducts.setText("Highest Selling Products");
        btnMostSoldProducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostSoldProductsActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Business/bar-chart (2).png"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 110, -1, 223));
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 130, -1, -1));

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Analytics Reports");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 280, 414, 184));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnMostEnrolledPrograms, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addComponent(btnMostSoldProducts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnMostActiveCustomers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(459, 459, 459))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(168, 168, 168)
                .addComponent(btnMostActiveCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74)
                .addComponent(btnMostSoldProducts, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnMostEnrolledPrograms, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(101, 101, 101))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 299, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnMostEnrolledProgramsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostEnrolledProgramsActionPerformed
        // TODO add your handling code here:
           // TODO add your handling code here:
     HashMap<String, Integer> courseRank = new HashMap();

        for (Program course : gymEnterprise.getProgramDirectory().getProgramList()) {
            courseRank.put(course.getProgramName(), 0);
        }

        for (ProgramRequest courseRequest : gymEnterprise.getProgramQueue().getProgramRequestList()) {
            Program course = courseRequest.getProgram();
            int count = 0;
            if (courseRank.containsKey(course.getProgramName())) {
                count = courseRank.get(course.getProgramName());
                count++;
                courseRank.put(course.getProgramName(), count);

            }
        }
             ArrayList<Map.Entry<String, Integer>> rankList = new ArrayList(courseRank.entrySet());

        Collections.sort(rankList, new Comparator<Map.Entry<String, Integer>>() {

            @Override
            public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2) {
                return -o1.getValue() + o2.getValue();
            }
        });

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (int i = 0; i < 5; i++) {
            dataset.setValue(rankList.get(i).getValue(), "a", rankList.get(i).getKey());
        }
        JFreeChart chart = ChartFactory.createBarChart("Program chosen", "Program Name", "No. of people who chose", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        BarRenderer renderer = (BarRenderer) p.getRenderer();
        renderer.setSeriesPaint(0, new Color(0, 128, 128));
        p.setRangeGridlinePaint(Color.black);
        ChartFrame chartFrame = new ChartFrame("Most popular courses", chart);
        chartFrame.setVisible(true);
        chartFrame.setSize(700, 500);
        chart.getTitle().setPaint(new Color(0, 128, 128));
     
    }//GEN-LAST:event_btnMostEnrolledProgramsActionPerformed

    private void btnMostActiveCustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostActiveCustomersActionPerformed
        // TODO add your handling code here:
         // TODO add your handling code here:

        HashMap<String, Integer> trainerRank = new HashMap();

        for (Organization organization : gymEnterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization.getName().equals("Trainer Organization")) {
                for (UserAccount ua : organization.getUserAccountDirectory().getUserAccountList()) {
                    trainerRank.put(ua.getPerson().getName(), 0);
                }
            }
        }
        
        for (BookingRequest appRequest : gymEnterprise.getBookingQueue().getAppointmentRequestList()) {
            int count = 0;
            if (trainerRank.containsKey(appRequest.getSender().getPerson().getName())) {
                count = trainerRank.get(appRequest.getSender().getPerson().getName());
            }
            count++;
            trainerRank.put(appRequest.getSender().getPerson().getName(), count);
        }
        System.out.println(trainerRank);
        
        ArrayList<Map.Entry<String, Integer>> rankList = new ArrayList(trainerRank.entrySet());

        Collections.sort(rankList, new Comparator<Map.Entry<String, Integer>>() {

            @Override
            public int compare(Map.Entry<String, Integer> en1, Map.Entry<String, Integer> en2) {
                return -en1.getValue() + en2.getValue();
            }
        });

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (int i = 0; i < 5; i++) {
            dataset.setValue(rankList.get(i).getValue(), "a", rankList.get(i).getKey());
        }
        JFreeChart chart = ChartFactory.createBarChart("Most active customers", "Customer", "Number", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        BarRenderer renderer = (BarRenderer) p.getRenderer();
        renderer.setSeriesPaint(0, new Color(0, 128, 128));
        ChartFrame chartFrame = new ChartFrame("Most Active Customer", chart);
        chartFrame.setVisible(true);
        chartFrame.setSize(700, 500);
        chartFrame.setBackground(Color.white);

     
    }//GEN-LAST:event_btnMostActiveCustomersActionPerformed

    private void btnMostSoldProductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostSoldProductsActionPerformed
        // TODO add your handling code here:
          // TODO add your handling code here:
        HashMap<String, Integer> productRank = new HashMap();
        SalesQueue salesQueue = new SalesQueue();

        for (Organization organization : gymEnterprise.getOrganizationDirectory().getOrganizationList()) 
            
            if (organization.getName().equals("Customer Organization")) 
                for (UserAccount us : organization.getUserAccountDirectory().getUserAccountList()) 
                    for (SalesRequest salesRequest : us.getSalesQueue().getOnlinesalesRequestList()) 
                        salesQueue.getOnlinesalesRequestList().add(salesRequest);

        for (SalesRequest salesRequest : salesQueue.getOnlinesalesRequestList()) 
            for (Sales product : salesRequest.getProductOrder().keySet()){
                
                int ct = 0;
                if (productRank.containsKey(product.getProductID()))
                { 
                    ct = productRank.get(product.getProductName());
                }
                ct = ct + salesRequest.getProductOrder().get(product);
                productRank.put(product.getProductName(), ct);
        }
            
        ArrayList<Map.Entry<String, Integer>> rankList = new ArrayList(productRank.entrySet());

        Collections.sort(rankList, new Comparator<Map.Entry<String, Integer>>() {

            @Override
            public int compare(Map.Entry<String, Integer> en1, Map.Entry<String, Integer> en2) {
                return -en1.getValue() + en2.getValue();
            }
        });

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (int i = 0; i < 5; i++) {
            dataset.setValue(rankList.get(i).getValue(), "a", rankList.get(i).getKey());
        }
        JFreeChart chart = ChartFactory.createBarChart("No. of products per order", "Product", "Amount", dataset, PlotOrientation.VERTICAL, false, true, false);
        
        CategoryPlot p = chart.getCategoryPlot();
        BarRenderer renderer = (BarRenderer) p.getRenderer();
        renderer.setSeriesPaint(0, new Color(0, 128, 128));
        p.setRangeGridlinePaint(Color.black);
        
        ChartFrame chartFrame = new ChartFrame("Most sold products", chart);
        chartFrame.setVisible(true);
        chartFrame.setSize(700, 500);
        
    }//GEN-LAST:event_btnMostSoldProductsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMostActiveCustomers;
    private javax.swing.JButton btnMostEnrolledPrograms;
    private javax.swing.JButton btnMostSoldProducts;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
